import com.sun.jmx.snmp.tasks.TaskServer;

ext {
    ext {
        jdkVersion = '1.8'
        gradleVersion = '2.10'
        lombokVersion = '1.16.6'
        log4j2Version='2.5'
        slf4jVersion='1.7.13'
        logbackVersion='1.1.3'
        junitVersion='4.12'
        rxjavaVersion='1.1.0'
        servletApiVersion='3.1.0'
        commonsLang3Version = '3.4'
        joolVersion='0.9.9'
        mockitoVersion='2.0.31-beta'
        hamcrestVersion='1.3'
        mySQLVersion='5.1.38'
        h2Version='1.4.190'
        postgresqlVersion='9.4.1207.jre7'
        p6spyVersion='2.1.4'
        guavaVersion='19.0'
        hibernateVersion='5.0.6.Final'
        hibernateValidatorVersion='5.2.2.Final'
        springVersion='4.2.4.RELEASE'
        springDataJpaVersion='1.9.2.RELEASE'
        validationApiVersion='1.1.0.Final'
        jtaVersion='1.1'
        javaxElApiVersion='3.0.1-b04'
        snakeyamlVersion='1.16'
    }
}

buildscript {
    ext {
        uptodateGradlePluginVersion='1.6.2'
        gradleExtraConfigurationsPluginVersion='3.0.3'
        gradleDockerVersion='1.2'
        dependencyManagementPluginVersion='0.5.4.RELEASE'
        coverallsGradlePluginVersion='2.4.0x'
        animalsnifferGradlePluginVersion='1.4.0'
        gradleCoberturaPluginVersion='2.3.0'
    }
    repositories {
        mavenLocal()
        maven { url "http://btciservice.bluetechnology.com.tw:8280/nexus/content/groups/public/" }
        jcenter()
    }
    dependencies {
        classpath "com.ofg:uptodate-gradle-plugin:$uptodateGradlePluginVersion"
        classpath "com.netflix.nebula:gradle-extra-configurations-plugin:$gradleExtraConfigurationsPluginVersion"
        classpath "se.transmode.gradle:gradle-docker:$gradleDockerVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$dependencyManagementPluginVersion"

        if (project.hasProperty("coverage")) {
            classpath "net.saliman:gradle-cobertura-plugin:$gradleCoberturaPluginVersion"
            classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:$coverallsGradlePluginVersion"
        }
        if (project.hasProperty("compatibility")) {
            classpath "be.insaneprogramming.gradle:animalsniffer-gradle-plugin:$animalsnifferGradlePluginVersion"
        }
    }
}

subprojects {
    group = 'postman'
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'osgi'
    apply plugin: 'docker'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
     apply plugin: 'pmd'

    if (project.hasProperty("coverage")) {
        apply plugin: 'cobertura'
        apply plugin: 'com.github.kt3k.coveralls'
        cobertura {
            coverageFormats=['xml', 'html']
            coverageExcludes = ['.*com\\.claridy\\.khub\\.admin\\.core\\.enums.*', '.*com\\.claridy\\.khub\\.admin\\.core\\.hibernate.*', '.*Test']
        }
    }
    if (project.hasProperty("compatibility")) {
        apply plugin: 'be.insaneprogramming.gradle.animalsniffer'
    }

    apply plugin: 'nebula.provided-base'
    apply plugin: 'nebula.optional-base'
    apply plugin: 'com.ofg.uptodate'

    sourceCompatibility = jdkVersion
    targetCompatibility = jdkVersion

    repositories {
        flatDir { dirs "$rootProject.projectDir/libs" }
        mavenLocal()
        maven { url "http://btciservice.bluetechnology.com.tw:8280/nexus/content/groups/public/" }
        maven { url "http://maven.vaadin.com/vaadin-addons" }
        jcenter()
    }

    dependencies {
        //log4j2 dependency
        compile "org.apache.logging.log4j:log4j-core:$log4j2Version"
        compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version"
        compile "org.apache.logging.log4j:log4j-jcl:$log4j2Version"
        compile "org.apache.logging.log4j:log4j-1.2-api:$log4j2Version"
        compile "org.slf4j:jul-to-slf4j:$slf4jVersion"

        //postgresql9.4
        compile "org.postgresql:postgresql:$postgresqlVersion"
        //h2
        compile "com.h2database:h2:$h2Version"
        //mysql
        compile "mysql:mysql-connector-java:$mySQLVersion"

        //hibernate
        compile "org.hibernate:hibernate-java8:$hibernateVersion"
        compile "org.hibernate:hibernate-entitymanager:$hibernateVersion"
        compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
//        compile "javax.validation:validation-api:$validationApiVersion"
        compile "javax.transaction:jta:$jtaVersion"
        compile "javax.el:javax.el-api:$javaxElApiVersion"

        //spring
        compile "org.springframework:spring-context-support:$springVersion"
        compile "org.springframework:spring-aop:$springVersion"
        compile "org.springframework:spring-orm:$springVersion"
        compile "org.springframework.data:spring-data-jpa:$springDataJpaVersion"


        compile "org.apache.commons:commons-lang3:$commonsLang3Version"
        compile "io.reactivex:rxjava:$rxjavaVersion"
        compile "org.jooq:jool:$joolVersion"
        compile "com.google.guava:guava:$guavaVersion"
        compile "p6spy:p6spy:$p6spyVersion"
        compile "org.yaml:snakeyaml:$snakeyamlVersion"

        provided  "org.projectlombok:lombok:$lombokVersion"

        testCompile "junit:junit:$junitVersion"
        testCompile "org.mockito:mockito-core:$mockitoVersion"
        testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"

        testCompile "org.springframework:spring-test:$springVersion"

    }

    configurations {
        //must exclude this for log4j2
        //    compile.exclude module: 'spring-boot-starter-logging'

        compile.exclude module: 'commons-logging'
    }

    eclipse {
        classpath {
            plusConfigurations += [configurations.provided]
            downloadSources = true
            downloadJavadoc = true
        }
    }

    checkstyle {
        ignoreFailures = true
        showViolations = false
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    findbugs { ignoreFailures = true }

    pmd {
        // issue:http://stackoverflow.com/questions/33339364/gradle-pmd-plugin-gets-java-lang-noclassdeffounderror-org-w3c-dom-elementtraver
        toolVersion = "5.3.5"
        ignoreFailures = true
        consoleOutput = false
        ruleSetFiles = rootProject.files("config/pmd/pmd.xml")
    }

}

allprojects {
}

task wrapper(type: Wrapper) { gradleVersion = delegate.gradleVersion }
